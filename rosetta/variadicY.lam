\io. let
  -- general form for mutual recursion
  -- https://www.khoury.northeastern.edu/home/shivers/papers/scheme02/article/variadic-y.pdf
  Y20 = \f0\f1. (
     (\x0\x1.f0 (x0 x0 x1) (x1 x0 x1))
     (\x0\x1.f0 (x0 x0 x1) (x1 x0 x1))
     (\x0\x1.f1 (x0 x0 x1) (x1 x0 x1))
  );
  Y21 = \f0\f1. (
    (\x0\x1.f1 (x0 x0 x1) (x1 x0 x1))
    (\x0\x1.f0 (x0 x0 x1) (x1 x0 x1))
    (\x0\x1.f1 (x0 x0 x1) (x1 x0 x1))
  );
  -- Ylist [f0,f1] = [
  --   let ffj = \xs@[x0,x1] -> fj [xk xs | k<-[0..n-1]] in
  --   ffj
  --  [ffi | i<-[0..n-1]]
  -- | j<-[0..n-1]]

  map = \f. (let go = \l.l(\h\t\_\z.z (f h) (go t))l in go);

  foo = \fi\xs. fi (map (\xi. xi xs) xs);
  Ygen  = \fs. map (\fi. foo fi (map foo fs)) fs;
  Ygen2 = \fs. map (\fi.     fi (Ygen2   fs)) fs; -- somehow equivalent to Ygen

  true = \x\y.x;
  false = \x\y.y;
  nil = false;
  cons = \x\y\z.z x y;
  evenLen = \fs\l. l (\_\t\_.fs false true t) true;
  oddLen  = \fs\l. l (\_\t\_.fs       true t) l;
  evenOdd = Ygen2 (cons evenLen (cons oddLen nil))
in cons (evenOdd true io) nil
