-- decode levenshtein code https://en.wikipedia.org/wiki/Levenshtein_coding
let
 cons = \x\y\z.z x y; -- needs to come first to inline last 2 cases
 id = \x.x;
 true = \x\y.x;
 false = \x\y.y;
 zero = false;
 one = id;

 -- readbit cont n (bit:list) = cont (2*n+bit) list
 readbit = \cont\n\list.list (\bit.cont (\f\x.(n f (n f (bit x (f x))))));

 -- 139 bit decoder
 -- delimit cont (levenstein_code_for_n ++ list) = cont n list
 delimit = \cont\list.list (\bit.bit (cont zero) (delimit (\len.len readbit cont one)));

 -- 2 bits shorter than reversing n little-endian incs
 incc = \cont\done\list list (\msb incc (\r\_ msb done cont (cons (\x\y msb y x) r))
                                        (\r\_     done      (cons       msb      r))
                             ) (cont list);
 inc = incc (cons true) id;

 nil = false;
 -- 197 bit converter
 church2bits = \n.cons (n inc nil);
in delimit church2bits -- 2 + 139 + 197 =  338 bits

-- test with

-- echo -n 1111000111001110 | ./blc run delimit.lam
-- which should output
-- <11010,110>

-- is also tested in uni.lam and pairup.lam
