-- universal machine for Levenshtein binary lambda calculus (BLC2)
let
 id = \x.x;
 true = \x\y.x;
 false = \x\y.y;

 -- readbit f cont n _ input = cont (n . n . if next_input_bit then f else id) bytes' input'
 readbit = \f\cont\n\_\inp.inp (\bit.cont (\x. n (n (bit x (f x)))));

 -- delimit f cont _ (levenstein_code_for_n_on_input) = cont (f^n) bytes' input'
 delimit = \f\cont\_\inp.inp (\bit.bit (cont id) (delimit (readbit f) (\n. n cont f)));

  -- binary LC interpreter
  -- int2 cont _ input = cont (\free.parsed) bytes' input'
  int2 = \cont\_\inp.inp (\bit0. bit0
    (\_\inp1.inp1 (\bit1.
       int2 (\exp.bit1 (cont (\args\arg.exp (\z.z arg args)))
                       (int2 (\exp2.cont (\args.exp args (exp2 args)))))))
    (delimit (\l.l bit0) (\n. cont (\args. n args true))));
  
  -- input bytes cont = cont nextbit nextbytes nextinput
  input = \bytes. bytes (\bits\bytes.
    let go = \bit\bits\next\cont.cont bit bytes (bits go next)
    in  bits go (input bytes));

  -- loop
  omega = omega;

  -- binary LC universal machine for closed programs
  uni2 = \bytes.int2 (\exp\bytes\_.exp omega bytes) bytes (input bytes)
in
  uni2
