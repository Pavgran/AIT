--         1   1   1 * 2   1 * 2 * 3   1 * 2 * 3 * 4
-- pi/2 =  - + - + ----- + --------- + ------------- + ...
--         1   3   3 * 5   3 * 5 * 7   3 * 5 * 7 * 9
-- since each term is less than halve of previous one
-- sum first n terms < pi/2 < sum first n terms + n'th term
-- a/c is 2^j times the sum of the first n terms minus the value of the j bits already output
-- b/c is 2^j times the n-th term product [1..n] / product [1,3..2*n+1]
-- halfpi = go 1 1 1 1 where
-- go b a c = let
--     prod bit a' n = bit : go (2*b) (2*a') c n
--   in if a >= c
--     then   \n. 1 : go (2*b) (2*(a-c) )  c       n
--     else if a + b < c
--       then \n. 0 : go (2*b) (2* a    )  c       n
--       else \n -> let
--         n21 = 2*n + 1
--         bn = b*n
--       in           go    bn (a*n21+bn) (c*n21) (n+1)

-- related: tpi.hs and tuple_numerals.lam

\io. let
  Csucc = \n\f\x. f (n f x);
  Tadd = \tm\tn\x. tm (tn x);
  id = \x. x;
  bit0 = \x\y. x;
  bit1 = \x\y. y;
  CTmul = \c\t. c t;
  Tsub = \tm\tn\x. tm id (tn x);
  Cadd  = \a\b\f\x. a f (b f x);
  cons = \a\b\p. p a b;

  -- 399+2 bits
  go = \Tb\Ta\Tc. let
      prod = \bit\Ta'\Cn. cons bit (go (Tadd Tb Tb) (Tadd Ta' Ta') Tc Cn) in
      (Tc (\_. prod bit1 (Tsub Tc Ta)))      -- case Ta >= Tc
      (Ta (\_.                               -- case Ta < Tc
         (Tc
             (\_\Cn. let                     -- case Ta+Tb >= Tc
                    x2np1 = CTmul (Csucc (Cadd Cn Cn));
                    CnxTb = CTmul Cn Tb
              in go CnxTb (Tadd (x2np1 Ta) CnxTb) (x2np1 Tc) (Csucc Cn)))
         (Ta (Tb (\_. prod bit0 Ta)))        -- case Ta+Tb < Tc
      ));

  C1 = id;
  T1 = \x\f. f x;
  pi = go T1 T1 T1 C1;

  -- YOLO, 376+2 bits
  step = \cont\Tb\Ta\Tc\Cn.
      let
          x2np1 = CTmul (Csucc (Cadd Cn Cn));
          CnxTb = CTmul Cn Tb
      in  cont CnxTb (x2np1 (Tadd Ta Tb)) (x2np1 Tc) (Csucc Cn);
  go_ = step (step (\Tb\Ta\Tc. let
      prod = \bit\Ta'\Cn. cons bit (go_ (Tadd Tb Tb) (Tadd Ta' Ta') Tc Cn) in
      (Tc (\_. prod bit1 (Tsub Tc Ta)))      -- case Ta >= Tc
      (Ta (\_. prod bit0 Ta))));             -- case Ta < Tc
  T0 = \x. x;
  pi_probably = go_ T1 T0 T1 C1;
in
  pi
