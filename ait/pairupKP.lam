-- pairup operator for KP.
--
-- pairup (ps ++ pi ++ qs ++ qi) evaluates to <po, qo>, provided that
-- 1) ps and qs represent the lambda calculus programs p and q, respectively,
-- 2) p (pi ++ Omega) evaluates to the normal form po
-- 3) q qi (ps ++ pi) evaluates to qo.
\io. let
  id = \x.x;
  true = \x\y.x;
  false = \x\y.y;
  nil = false;
  omega = omega;

  -- IF_DIRTY: 784 bits / !IF_DIRTY: 823 bits
  IF_DIRTY = true;

  ----------------------------------------------------------------------------
  -- parse binary lambda calculus using HOAS, capturing program.
  -- uni :: ((t -> t) -> t)     -- abstraction
  --     -> (t -> (t -> t))     -- application
  --     -> (([t] -> t) -> ([Bool] -> [Bool]) -> [Bool] -> r)
  --        -- continuation taking program, parsed string, remainder of input
  --     -> ([Bool] -> [Bool])  -- initial difference list (id)
  --     -> [Bool]              -- input
  --     -> r

  uni = \abs\app.let uni0 = \cnt\ps\xs.
    xs (\b0.let ps0 = \ts.ps (\p.p b0 ts) in
      \ys\uni0\cnt.ys (\b1.
        let ps1 = \ts.ps0 (\p.p b1 ts) in
          b0 (uni0 (\v1.(b1 (cnt (\ctx.abs (\v2.v1 (\p.p v2 ctx))))
                           (uni0 (\v2.cnt (\ctx.app (v1 ctx) (v2 ctx)))))))
             (b1 (cnt (\ctx.ctx b1))
                 (\d\d.uni0 (\v.cnt (\ctx.v (ctx b1))) ps0 ys)) ps1)) uni0 cnt
  in uni0;

  -- data T = A (V -> V)  -- abstraction
  --        | V           -- free variable
  --        | O           -- "Omega" marking the end of the available input
  caseT = \t\a\v\o. t a v o;
  A = \f. \a\v\o. a f;
  V = \a\v\o. v;
  O = \a\v\o. o;

  nfT = \t. caseT t
    (\f. nfT (f V))  -- A: apply to a free variable to further reduce whnf
    t                -- V: done, this is a normal form
    t;               -- O: done, we've hit the "Omega"

  appT = \t\u. caseT t
    (\f. f u)        -- A: apply
    (nfT u)          -- V: reduce argument to normal form next
    t;               -- O: preserve O
  appT = \t. caseT t (\f. f) nfT (\u. t); -- same but smaller

  absT = A;

  boolT = \x. absT (\t. absT (\f. x t f));
  consT = \x\xs. absT (\p. appT (appT p x) xs);


  result = \pspi\rs. \p.
    let uni1 = uni id id (\prog\ps\rs. prog (IF_DIRTY ps omega) rs) id in
    p (uni1 io) (uni1 rs pspi);

  rest = \prog\ps.
    let go = \is\pspi\xs.
         caseT (nfT (appT (prog (IF_DIRTY xs omega)) (is O)))
            xs -- A: impossible case
            (result (pspi nil) xs) -- V: we've found the remainder
            -- O: start over with a longer input list
            (xs (\x\xs. go (\tl. is (consT (boolT x) tl))
                           (\tl. pspi (\p. p x tl)) xs))
    in  go id ps;

  pairup = uni absT appT rest id io;

in pairup

-- (cat delimito.blc; echo -n 1110101100000000001; cat pairlen.blc; echo -n 1010) | ./blc run pairupo.lam
-- <10000000000,<1110010,1010>>
