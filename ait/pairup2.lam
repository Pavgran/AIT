-- pairup operator.
-- pairup (ps ++ pi ++ qs ++ qi) evaluates to <<po, qo>, rs>, provided that
-- 1) ps and qs represent the lambda calculus programs p and q, respectively,
-- 2) p (pi ++ X) evaluates to <po, X> for all X (even non-lists), and
-- 3) q qi (ps ++ pi) evaluates to <qo, rs>.
let
  id = \x.x;
  true = \x\y.x;
  false = \x\y.y;
  nil = false;

  -- Enabling IFDIRTY replaces some omegas by suitable variables to save space.
  -- IFDIRTY,  !CPS: 657 bits / CPS: 718
  -- !IFDIRTY, !CPS: 787 bits / CPS: 787
  IFDIRTY = true;
  IFCPS = false;

  ----------------------------------------------------------------------------
  -- Parse and compile binary lambda calculus.
  --
  -- For reference, a generic monadic evaluator, using type
  --   Val ~ m Val -> m Val
  -- would be  uni return (liftM2 id) (\prog\ps\rs.prog omega (encode rs))
  -- where encode :: [Bool] -> m Val.
  --
  -- In the continuation, ps contains the consumed bits as a difference list.

  uni = \abs\app.let uni0 = \cnt\ps\xs.
    xs (\b0.let ps0 = \ts.ps (\p.p b0 ts) in
      \ys\uni0\cnt.ys (\b1.
        let ps1 = \ts.ps0 (\p.p b1 ts) in
          b0 (uni0 (\v1.(b1 (cnt (\ctx.abs (\v2.v1 (\p.p v2 ctx))))
                           (uni0 (\v2.cnt (\ctx.app (v1 ctx) (v2 ctx)))))))
             (b1 (cnt (\ctx.ctx b1))
                 (\d\d.uni0 (\v.cnt (\ctx.v (ctx b1))) ps0 ys)) ps1)) uni0 cnt
  in uni0;

  ----------------------------------------------------------------------------
  -- Pair evaluator, using m a = (label, a).
  -- The label is usually 'omega', but the input is labelled such that each
  -- tail of io is initially annotated with the corresponding prefix ys.

  omega = omega;
  absP = IFDIRTY (\v\p.v) (\v\p.p omega v);
  appP = \ca.ca false;

  listP = \x\xs\ys.
     let mx = absP (\e.absP (x e));
         mxs = xs listP (\rs.ys (\p.p x rs)) in
     \p.p ys (\e.e false mx false mxs);

  pairupP = uni absP appP (\prog\ps\pi.
    let pspi = \d.(
          prog (IFDIRTY d omega) -- provide ctx
          (IFDIRTY d false)      -- monadic apply
          (pi listP ps)          -- to monadic input, expect monadic <poM,qsM>
          false                  -- get <poM,qsM>; can't use d here in case prog is id
          (IFDIRTY (\p\e\p\e.e) (\p.p omega (\e\p.p omega (\e.e))))   -- monadic tail
          true                   -- head of qsM is difflist of bits read
          nil);                  -- terminate list
        -- Direct evaluator, using the identity monad.
        eval = uni id id (IFDIRTY id (\p\ps.p omega)) pi
    in eval (ps pi) (\po\qs.eval qs (pspi qs) (\qo\rs\p.p (\p.p po qo) rs))) id;

  ----------------------------------------------------------------------------
  -- CPS evaluator, using m a = (a -> label -> label) -> label -> label
  --   returnC = \a\r.r a;
  --   bindC = \ma\mb\r.ma (\a.mb a r);
  -- The label -> label function keeps track of the most recently seen tail
  -- of the input.

  absC = \v\r.IFDIRTY (r v) (\d.r v omega);
  appC = \ca\cb\r.ca (\a.a cb r);

  listC = \x\xs\ys.
    let mx = \r.r (\a\r.r (x a));
        mxs = xs listC (\rs.ys (\p.p x rs)) in
    \r\d.r (\cb.(\r.cb (\a.a mx (\a.a mxs r)))) (ys nil);

  pairupC = uni absC appC (\prog\ps\pi.
    let pspi = \d.ps (
          prog (IFDIRTY d omega)
          (\a.a (pi listC (\f.f))
            (\a.a (\r.r (\d\r.r id)) (\a\f.f)))
          (IFDIRTY d omega));

        -- Direct evaluator, using the identity monad.
        eval = uni id id (IFDIRTY id (\p\ps.p omega)) pi
    in eval (ps pi) (\po\qs.eval qs (pspi qs) (\qo\rs\p.p (\p.p po qo) rs))) id;

  main = IFCPS pairupC pairupP
in main

-- (cat delimit.blc; echo -n  1111000111001; cat pairlen.blc) | ./blc run pairup2.lam
-- <<11010,11010110>,>
-- (cat delimit2.blc; echo -n 1110101110000000000; cat pairlen.blc; echo -n 1010) | ./blc run pairup2.lam
-- <<10000000000,00000000>,1010>
