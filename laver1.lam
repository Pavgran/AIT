let
  0 = \f\x. x;
  1 = \x. x;
  2 = \f\x. f (f x);
  3 = \f\x. f (f (f x));
  6 = \f.2 (3 f);
  7 = \f\x.f (6 f x);
  16 = (\x. x x x) 2;
  pred = \n\f\x. n (\g\h. h (g f)) (\h. x) (\x. x);

  -- cons = \a\b\z.z a b;
  revfrom0 = \x\xs.x (\t. xs revfrom0 (\z.z x t));
  iterate = \f. let it = \x\z.z x (it (f x)) in it;
  idx = \i\xs. i (\l.l (\h\t.t)) xs (\h\t.h);

-- laver 0 b = b
-- laver a b = cycle (go (a-1)) !! b
-- go a = cycle (0 : reverse (takeWhile (/= 0) (iterate (\b -> laver b a) a)))

  laver = let 
    go = \a. let r = \z.z 0 (iterate (\b. laver b a) a revfrom0 r) in r;
    laver = \a. a (\b. idx b (go (pred a)))
  in laver
in
  laver -- 7 3
