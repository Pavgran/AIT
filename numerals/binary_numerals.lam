-- binary arithmetic
let
  id = \x.x;
  true = \x\y.x;
  false = \x\y.y;
  not = \b\x\y.b y x;
  or  = \a\b.b b a;
  and = \a\b.b a b;
  xor = \a\b.a b (not b); -- xor on bits (0==true), not booleans
  xor3 = \a\b.xor (xor a b);
  maj = \a.a or and;
  nil = false;
  cons = \a\b\p.p a b;
  -- fold: xs (fold f) <==> foldr f id xs
  fold  = \f.(let go = \x\xs.f x    (xs go) in go);
  -- variant of 'fold' with access to tail
  -- xs (fold_ f) z <==> foldr3 f z xs
  -- (a:b:c:nil) (fold_ f) z =
  -- go a (b:c:nil) z = f a (b:c:nil) (go b (c:nil)) z =
  -- f a (b:c:nil) (f b (c:nil) (go c nil)) z =
  -- f a (b:c:nil) (f b (c:nil) (f c nil id)) z
  fold_ = \f.(let go = \x\xs.f x xs (xs go) in go);
  -- digits
  0 = true;
  1 = false;
  -- small numbers, no trailing 0s, normal binary, reverse order
  n0 = nil;
  n1 = cons 1 nil;
  n2 = cons 0 (cons 1 nil);
  n3 = cons 1 (cons 1 nil);
  n10 = cons 0 (cons 1 (cons 0 (cons 1 nil)));
  -- small numbers, trailing 0s, nth in lexicographic order
  t0 = nil;
  t1 = cons 0 nil;
  t2 = cons 1 nil;
  t3 = cons 0 (cons 0 nil);
  t10 = cons 1 (cons 1 (cons 0 nil));
  -- successor
  succ_ = \z\n. n (fold_ (\b\n_\n1_\i. cons (not b) (b n_ (n1_ i)))) z;
  succ  = succ_ n1;
  tsucc = succ_ t1;
  -- addition
  add_ = \d\n. n
    (fold (\b\f\m.
      let m_ = m (\_\m_\_.m_) m
      in m d (cons b (f m_))));
  add  = add_ (\b\_.b id succ);
  tadd = add_ (\c\_.(\s\x.s (c x (s x))) tsucc);
  -- multiplication
  mul = \n\m. n (fold (\b\f\n0. b id (add m) (cons 0 (f n0)))) n0;
  -- iteration
  church = \n\f. n (fold (\b\g\x. b id f (g (g x))));
  -- factorial
  fac = \n. church n (\c\n. let n_ = succ n in mul (c n_) n_) (\c.n1) n0
in fac
