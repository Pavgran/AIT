let
  id = \x.x;
  True = \t\f.t;
  False = \t\f.f;
  if = \b\t\f.b t f;
  -- Scott numerals
  S0 = \s\z.z;
  Ssucc = \n\s\z.s n;
  Spred = \n.n id n;
  S1 = Ssucc S0;
  S2 = Ssucc S1;
  S3 = Ssucc S2;
  S4 = Ssucc S3;
  S5 = Ssucc S4;
  S6 = Ssucc S5;

  isZero = \n.n (\m.False) True;
  K = True;
  Sadd = \x\y. x (\x1. Ssucc (Sadd x1 y)) y;
  Ssub = \x\y. y (x Ssub (\y1. x)) x;
  Smul = \x\y. x (\x1. Sadd y (Smul x1 y)) S0;
  Sfac = \x. x (\x1. Smul x (Sfac x1)) S1;
  Seq = \x\y. x (y Seq (\x1.y)) (y (\y1. x) True);
  sumto = \x. x (\x1. Sadd x (sumto x1)) x;
  S6' = Sadd S3 S3;
  S5' = Ssub S6 S1;
  S17 = Sadd S6 (Sadd S6 S5);
  S37 = Ssucc (Smul S6 S6);
  S703 = sumto S37;
  S720 = Sfac S6;
  test = Seq (Ssub S720 S17) S703
in test

-- test with
-- ./blc nf scott_numerals.lam
-- which should output
-- \\2
-- i.e. True
