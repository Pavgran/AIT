-- computes infinite Laver table as in section 3.4 of https://arxiv.org/pdf/1810.00548.pdf
-- except with arguments reversed, ie. p * q = laver q p
let
  0    =   \s\z. z;
  succ = \n\s\z. s n; -- Scott numerals
  1 = succ 0;
  2 = succ 1;
  3 = succ 2;
  4 = succ 3;
  5 = succ 4;
  6 = succ 5;
  7 = succ 6;

  -- cons = \h\t\z.z t h; -- applying to head last gives trivial list indexing as (list n)
  revpos = \t\h\r.h (\_. t revpos (\z.z r h)) r; -- reverse positive prefix and append r
  iterate = \f. let it = \x\z.z (it (f x)) x in it;

-- laver b 0 = b
-- laver b a = cycle (go (a-1)) !! b
-- go a = cycle (0 : reverse (takeWhile (/= 0) (iterate (laver a) a)))

  laver = let 
    go = \a.let r = \z.z (iterate (laver a) a revpos r) z in r;
    laver = \b\a. a (\a1. go a1 b) b
  in laver
in
  laver -- 3 7
