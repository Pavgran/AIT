let derive = (let
  id = \x.x;
  -- function composition
  comp = \f\g\x. f (g x);
  -- Church numerals
  C0 = \f\x.x;
  C1 = id;
  Csucc = \n\f\x. f (n f x);
  C2 = Csucc C1;
  C3 = Csucc C2;
  Cadd = \m\n\f\x. m f (n f x);
  Cmul = comp;
  Cpow = \m\n. n m;
  -- Scott numerals
  Ssucc = \n\s\z. s n;
  Spred = \n. n (\n1. n1) n;
  S0    = \s\z. z;
  S1    = Ssucc S0;
  -- Booleans
  T = \x\y. x;
  F = \x\y. y;
  not = \b\t\f. b f t;
  eqb = \b1\b2.b1 b2 (not b2); -- boolean equality	30 bits
  -- list ops
  nil = F;
  cons = \x\y\z.z x y;

  judge = \ctx\trm\typ\z.z ctx typ trm;

  -- list equality		146 bits
  eql = \eq. let go = \l\m. l (\t\l1\_. m (\t2\m1\m. eq t t2 (go l1 m1) F) m) (m (\b\m1\_. l) T) in go;

  -- term constructors
  app     = \ta\tb \pla\bs\vr. pla S0 ta tb;
  boxstar =  \b    \pla\bs\vr. bs b;
  var     = \v     \pla\bs\vr. vr v;

  -- serialize			263 bits
  ser = \t\l. let cT = cons T; cF = cons F in t -- DECON
    (\mb. \ta\tb. cT (mb (\b. comp cT (cons b)) cF (ser ta (ser tb l))))
    (\b        . cF (cT (cons b l)))
    (let go=\v . cF (cF (v go (cT l))) in go)
  ;

  -- term equality		459 bits
  eqt = \t1\t2. eql eqb (ser t1 nil) (ser t2 nil);

  -- context equality		500 bits
  eqc = eql eqt;

  -- help define lift twice, in and out of subst mutual recursion
  slift = \sub. sub S0 (var S1) Ssucc;		-- 56 bits

  -- final term constructor
  pilam = \b\ta\tb \pla\bs\vr. pla (Ssucc b) ta tb;

  -- substitute term e for variable v in term t, applying d to outer variables
  subst = \v\e\d. let		-- 555 bits
    apply = \f\a.let kfa = \_. app f a in f -- DECON
      (\mb\ta. mb (\b. b kfa (subst S0 a Spred)) kfa)
      (     kfa)
      (     kfa)
    ;
    lift = slift subst;
    sved = subst v e d
  in \t.t -- DECON
    (\mb\ta\tb. mb (\b. pilam b (sved ta) (subst (Ssucc v) (lift e) d tb)) (apply (sved ta) (sved tb)))
    (\b      . t)
    (\w      . let cmp = \v\u. v (\v1. u (cmp v1) t) (u (\u1. var (d w)) e) in cmp v w)
  ;

  lift = slift subst;
  apply = \f\a. subst S0 (var S0) id (app f a);

  -- rules 2+3+4+5+6
  rules = \jdg1\jdg2. jdg1 (\ctx\typ\trm. jdg2 (\ctx2\typ2\trm2. eqc ctx ctx2 (
    let
      isSort = \t\f. typ2 -- DECON
        (\mb\ta\tb. f)
        (\b       . t)
        (\w       . f);
      weaken = isSort (cons (judge (cons trm2 ctx2) (lift trm) (lift typ))) id;
      iLamPi = ctx2 (\tp\ctx21. cons (judge ctx21 (pilam isSort tp trm2) (isSort id (pilam T tp) typ2)));
      iVar   = \tail. isSort (cons (judge (cons trm2 ctx2) (var S0) (lift trm2)) tail) tail;
      iApp   = typ -- DECON
        (\mb\ta\tb. mb (\b. eqt ta typ2 (cons (judge ctx2 (apply trm trm2) (subst S0 trm2 Spred tb))) id) id)
        (\b      . id)
        (\w      . id)
    in \tail. weaken (iApp (iLamPi (iVar tail)))
  ) id));

  -- derive			2219 bits
  derive = \n. let
    fold = \f\z. let go = \l. l (\h\t\z.f h (go t)) z in go
  in fold (\jdg. jdg (\ctx\typ\trm. Cpow (fold (\_. Csucc) C1 (ser trm nil)))) C1
  (n (
    \l. fold (\j1. fold (\j2. comp (rules j1 j2)) id l) (cons (judge nil (boxstar F) (boxstar T)) nil) l
  ) nil);

  in derive);
  3 = \f\x. f (f (f x))
in 3 3 derive 3
