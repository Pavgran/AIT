let derive = (let
  id = \x.x;
  -- function composition
  comp = \f\g\x. f (g x);
  -- Church numerals
  C0 = \f\x.x;
  C1 = id;
  Csucc = \n\f\x. f (n f x);
  C2 = Csucc C1;
  C3 = Csucc C2;
  Cadd = \m\n\f\x. m f (n f x);
  Cmul = comp;
  Cpow = \m\n. n m;
  -- Scott numerals
  Ssucc = \n\s\z. s n;
  Spred = \n. n (\n1. n1) n;
  S0    = \s\z. z;
  S1    = Ssucc S0;
  -- Booleans
  T = \x\y. x;
  F = \x\y. y;
  not = \b\t\f. b f t;
  eqb  = \b1\b2.b1 b2 (not  b2); -- boolean equality	30 bits
  eqb2 = \b1\b2.b1 b2 (b2 b1 T); -- boolean equality	29 bits -- found by Marvin Borner
  -- list ops
  nil = F;
  cons = \x\y\z.z x y;

  judge = \ctx\typ\trm\z.z ctx typ trm;

  -- list equality		146 bits
  eql = \eq. let go = \l\m. l (\t\l1\_. m (\t2\m1\m. eq t t2 (go l1 m1) F) m) (m (\b\m1\_. l) T) in go;

  -- term constructors
  app     = \ta\tb \pla\bs\vr. pla S0 ta tb;
  boxstar =  \b    \pla\bs\vr. bs b;
  var     = \v     \pla\bs\vr. vr v;

  -- serialize			273 bits
  sers = \l\t. let cT = cons T; cF = cons F in t
    (\mb. \ta\tb. cT (mb (\b. comp cT (cons b)) cF (sers (sers l tb) ta)))
    (\b        . cF (cT (cons b l)))
    (let go=\v . cF (cF (v go (cT l))) in go);
  ser = sers nil;

  -- term equality		453 bits
  eqt = \t1\t2. eql eqb (ser t1) (ser t2);

  -- context equality		494 bits
  eqc = eql eqt;

  -- help define lift twice, in and out of subst mutual recursion
  slift = \sub. sub S0 (var S1) Ssucc;		-- 56 bits

  -- final term constructor
  pilam = \b\ta\tb \pla\bs\vr. pla (Ssucc b) ta tb;

  -- substitute term e for variable v in term t, applying d to outer variables
  subst = \v\e\d. let		-- 551 bits
    apply = \f\a.let kfa = \_. app f a in f
      (\mb\ta. mb (\b. b kfa (subst S0 a Spred)) kfa)
      (     kfa)
      (     kfa)
    ;
    lift = slift subst;
    sved = subst v e d
  in \t.t
    (\mb\ta\tb. mb (\b. pilam b (sved ta) (subst (Ssucc v) (lift e) d tb)) (apply (sved ta) (sved tb)))
    (\b      . t)
    (\w      . let cmp = \v\u. v (\v1. u (cmp v1) t) (u (\u1. var (d w)) e) in cmp v w)
  ;

  lift = slift subst;
  apply = \f\a. subst S0 (var S0) id (app f a);

  -- rules 2+3+4+5+6		-- 1940 bits
  rules = \jdg1\jdg2. jdg1 (\ctx\typ\trm. jdg2 (\ctx2\typ2\trm2. eqc ctx ctx2 (
    let
      isSort = \t\f. typ2
        (\mb\ta\tb. f)
        (\b       . t)
        (\w       . f);
      weaken = isSort (cons (judge (cons trm2 ctx2) (lift typ) (lift trm))) id;
      iLamPi = ctx2 (\tp\ctx21. cons (judge ctx21 (isSort id (pilam T tp) typ2) (pilam isSort tp trm2)));
      iVar   = \tail. isSort (cons (judge (cons trm2 ctx2) (lift trm2) (var S0)) tail) tail;
      iApp   = typ
        (\mb\ta\tb. mb (\b. eqt ta typ2 (cons (judge ctx2 (subst S0 trm2 Spred tb) (apply trm trm2))) id) id)
        (\b      . id)
        (\w      . id)
    in \tail. weaken (iApp (iLamPi (iVar tail)))
  ) id));

  -- derive
  in \n. let
    ffold = \f. let go = \l.l (\h\t\z.f h (go t z)) in go; -- fold with 2nd/3rd arguments flipped
    expand = \l. ffold (\j1. ffold (\j2. comp (rules j1 j2)) l id) l (cons (judge nil (boxstar T) (boxstar F)) nil);
    sizetower = ffold (\jdg. jdg (\ctx\typ\trm. Cpow (ffold (\_. Csucc) (ser trm) C1)))
  in sizetower (n expand nil) n);

  3 = \f\x. f (f (f x))
in 3 3 derive 3

-- 3 expand nil =

-- corresponding to the list of judgement [ "*, * |- * : □", " |- Π*.* : □", "*, * |- 0 : *", "*, 0 |- * : □", " |- Π*.0 : *", "*, 0 |- 0 : 1", "*, * |- 1 : *", " |- Π*.* : □", "*, * |- 0 : *", "*, 0 |- 1 : *", " |- Π*.0 : *", "*, 0 |- 0 : 1", "* |- * : □", "* |- 0 : *", " |- * : □"]
-- with term sizes+1 [4,10,4,4,10,4,6,10,4,6,10,4,4,4,4]
