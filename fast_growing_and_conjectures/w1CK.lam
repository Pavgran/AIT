-- See https://googology.fandom.com/wiki/Church-Kleene_ordinal for more
let
  -- Church numerals, corresponding to Church encoding of
  -- data Nat = Zero | Succ Nat
  -- type: N = forall r. r -> (r -> r) -> r
  CZero = \f\x. x;
  Csucc = \n.\f\x. f (n f x);
  C0 = CZero;
  C1 = Csucc C0;
  C2 = Csucc C1;
  C3 = Csucc C2;

  -- Kleene ordinals, corresponding to Church encoding of
  -- data Ord = Zero | Succ Ord | Lim (Nat -> Ord)
  -- type: forall r. r -> (r -> r) -> ((N -> r) -> r) -> r
  Zero =    \l\s\z.            z     ; -- ordinal 0
  Succ = \n.\l\s\z.       s (n l s z); -- successor ordinal n+1
  Lim  = \f.\l\s\z. l (\n. f n l s z); -- limit ordinal sup { f C0, f C1, f C2, ... }

  -- The set K of ordinal notations is defined inductively by
  -- Zero is in K
  -- if n is in K, then Succ n is in K
  -- if f Cn is in K for all Church numerals Cn, then Lim f is in K

  O0 = Zero;                 -- size 8
  O1 = Succ O0;              -- size 6
  O2 = Succ O1;              -- size 53
  O3 = Succ O2;              -- size 57
  O4 = Succ O3;              -- size 61
  O5 = Succ O4;              -- size 65
  O6 = Succ O5;              -- size 69
  O7 = Succ O6;              -- size 73
  O8 = Succ O7;              -- size 77
  -- limit ordinal sup { O0, O1, O2, ... }
  Ow = Lim (\n.n Succ Zero); -- size 79
  O9 = Succ O8;              -- size 81
  Ow1 = Succ Ow;             -- size 93;

  -- arithmetic
  add  = \n\m. m Lim Succ n;             -- size 92
  -- add n Zero = Zero Lim Succ n = n
  -- add n (Succ m) = Succ m Lim Succ n
  --               = Succ (m Lim Succ n) = Succ (add n m)
  -- add n (Lim f) = Lim f Lim Succ n
  --        = Lim (\i. f i Lim Succ n) = Lim (\i. add n (f i))
  mul  = \n\m. m Lim (\x. add x n) Zero; -- size 116
  -- mul n Zero = Zero Lim (\x. add x n) Zero = Zero
  -- mul n (Succ m) = Succ m Lim (\x. add x n) Zero
  --      = (\x. add x n) (m Lim (\x. add x n) Zero)
  --                = add (m Lim (\x. add x n) Zero) n = add (mul n m) n
  -- mul n (Lim f) = Lim f Lim (\x. add x n) Zero
  --        = Lim (\i. f i Lim (\x. add x n) Zero) = Lim (\i. mul n (f i))
  expw = \n. n Lim (\x. mul x Ow) O1;    -- size 175
  -- expw Zero = Zero Lim (\x. mul x Ow) O1 = O1
  -- expw (Succ n) = Succ n Lim (\x. mul x Ow) O1
  --    = (\x. mul x Ow) (n Lim (\x. mul x Ow) O1)
  --               = mul (n Lim (\x. mul x Ow) O1) Ow = mul (expw n) Ow
  -- expw (Lim f) = Lim f Lim (\x. mul x Ow) O1
  --       = Lim (\i. f i Lim (\x. mul x Ow) O1) = Lim (\i. expw (f i))

  Ow2      = add Ow Ow;                       -- size 130  w * 2
  Oww      = expw Ow;                         -- size 176  w^w
  Oeps0    = Lim (\n. n expw O0);             -- size 202  epsilon_0
  OepsSucc = \e. Lim (\n. n expw (Succ e));   -- size 210  epsilon_i -> epsilon_i+1

  iter = \f\n. n f n;             -- iterate
  diag = \f\n. f n n;             -- diagonalize

  -- Fast Growing Hierarchy
  -- type: O -> N -> N
  fgh = \a. a
              diag                -- f_a = f_a_n n
              iter                -- f_a+1 = n f_a n
              Csucc;              -- f_0 n = n+1
  -- fgh (Lim f) n  = Lim f diag iter Csucc n =
  -- (\f\n. f n n) (\i. f i diag iter Csucc) n
  --  = f n diag iter Csucc n = fgh (f n) n

  -- Hardy Hierarchy
  -- type: O -> N -> N
  hh = \a. a
              diag                -- f_a = f_a_n n
              (\f\n. f (Csucc n)) -- f_a+1 = f_a (n+1)
              C1;                 -- f_0 n = n

  -- Fundamental sequence for w1CK
  -- w1CKi is the BLC-lexicographically-minimal ordinal exceeding all w1CKj for j < i
  -- similar to a Busy Beaver for ordinals
  -- Conjectured first 11 elements:
  w1CK0 = O0;
  w1CK1 = O1;
  w1CK2 = O2;
  w1CK3 = O3;
  w1CK4 = O4;
  w1CK5 = O5;
  w1CK6 = O6;
  w1CK7 = O7;
  w1CK8 = O8;
  w1CK9 = Ow;  -- lexicographically precedes O9
  w1CK10 = Ow1; -- must be larger than w1CK9
in fgh -- fgh Oeps0
