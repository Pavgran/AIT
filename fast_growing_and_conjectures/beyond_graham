-- On https://codegolf.stackexchange.com/questions/6430/shortest-terminating-program-whose-output-size-exceeds-grahams-number/219734#comment533337_219734
-- user https://codegolf.stackexchange.com/users/98257/2014melo03
-- gives the following program to compute a number beyond Graham in only 63 bits
let
  2 = \f\x.f (f x);
  H = \h\f\n.n h f n
in 2 (2 H 2) 2 2 -- BG 2

-- LOWER BOUND FOR MELO'S NUMBER --

-- DEFINITIONS --

Define the Fast Growing functions f_a indexed by ordinals a as
f_0 = succ
H1 = \f\n.n f n
f_{a+1} = H1 f_a = \n. n f_a n
f_a = f_{a[n]} for limit ordinals a

Here, a[n] denotes the n'th term of the fixed fundamental sequence assigned to ordinal a < e_0:
w[n] = n
w^{a+1}[n] = w^a*n
(w^a)[n] = w^{a[n]} for limit ordinals a

Further define
H2 = H 2
2H2 = H H2
BG = H 2H2 2

-- LEMMAS --

2 n > succ n = f_0 n                                 -- for n >= 2

H2 f_a n = n  2 f_a n >= n f_a n = f_{a+1} n         -- for n >= 0

Induction case: assume (i 2H2 2) n > f_{w*i} n (proven for i=0). Then
(succ i) 2H2 2 n = H H2 (i 2H2 2) n > H H2 f_{w*i} n = n H2 f_{w*i} n > f_{w*i+n} n = f_{w*i+w} n
This proves i 2H2 2 n > f_{w*i} n

-- for n >= 2
BG n = H 2H2 2 n = n 2H2 2 n > f_{w*n} n = f_{w*w} n
BG 2 > f_{w*w} 2 = f_{w*2} 2 = f_{w+2} 2 = 2 f_{w+1} 2 = f_{w+1} (f_{w+1} 2) =
       f_{w+1} (2 f_w 2) = f_{w+1} (f_w (f_w 2)) = f_{w+1} (f_w (f_2 2)) =
       f_{w+1} (f_w 8) = f_{w+1} (f_8 8)

-- UPPER BOUND FOR GRAHAM'S NUMBER --

-- DEFINITIONS --

times = \a\b\f.a (b f);
upify = \f\n.n f 1;
gs = \n.n upify (times 3) 3;
graham = 64 gs 4;

-- LEMMAS --

times 3 n = 3*n < n*2^n = f_2 n                               -- for n >= 2

upify f_a n = n f_a 1 <= n f_a n = f_{a+1} n                  -- for n >= 1

gs n = n upify (times 3) 3 < n upify f_2 3 <= f_{2+n} 3
    <= f_{n+2} (n+2) - 2 = f_w (n+2) - 2                      -- for n >= 1

-- Proof by Induction that for n >= 6: n gs 4 < n f_w n - 2

Base: 6 gs 4 = 5 gs (gs 4) < 5 gs (f_w 6 - 2) < 5 fw (f_w 6) - 2 = 6 f_w 6 - 2

Step: (n+1) gs 4 = gs (n gs 4) < gs (n f_w n - 2) < f_w (n f_w n) - 2
              = (n+1) f_w n - 2 < (n+1) f_w (n+1) - 2

G n = n gs 4 < n f_w n - 2 < f_{w+1} n                        -- for n >= 6

-- THEOREM --
G 64 < f_{w+1}(64)
