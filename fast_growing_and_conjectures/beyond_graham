https://googology.fandom.com/wiki/User_blog:JohnTromp/The_largest_number_representable_in_64_bits#Lambda_Calculus

let
  2 = \f\x.f (f x);
  H = \h\f\n.n h f n;
in 2 2 H 2 2 2

    f_0 n = 2 n
f_{α+1} n = 2 n f_α n = H2 f_α n 
    f_ω n = f_n n

    1 H 2 f_α n       =    H2 f_α       n = f_{α+1} n 
    2 H 2 f_{ω*i}   n = H  H2 f_{ω*i}   n = n  H2 f_{ω*i}   n = f_{ω*i+n}       n = f_{ω*i+ω} n
    3 H 2 f_{ω^2*i} n = H 2H2 f_{ω^2*i} n = n 2H2 f_{ω^2*i} n = f_{ω^2*i+ω*n}   n = f_{ω^2*i+ω^2} n
    4 H 2 f_{ω^3*i} n = H 3H2 f_{ω^3*i} n = n 3H2 f_{ω^3*i} n = f_{ω^3*i+ω^2*n} n = f_{ω^3*i+ω^3} n

BB3W = 4 H 2 f_0 2 = f_{ω^3} 2

LEMMA forall i>=0,j>0: (j+1) H 2 f_{ω^j*i} n = f_{ω^j*i+ω^j} n

Base j=1: 2 H 2 f_{ω*i}   n = H H2 f_{ω*i} n = n H2 f_{ω*i} n = f_{ω*i+n} n = f_{ω*i+ω} n
Step: (j+1) H 2 f_{ω^j*i} n = H jH2 f_{ω^j*i} n = n jH2 f_{ω^j*i} n
                            = f_{ω^j*i+ω^(j-1)*n} n = f_{ω^j*i+ω^j} n


-- UPPER BOUND FOR GRAHAM'S NUMBER --

times = \a\b\f.a (b f);
-- Knuth's a `uparrow^k` b = k upify (times a) b
upify = \f\n.n f 1;
g = \n.n upify (times 3) 3;
graham = 64 g 4;

-- LEMMAS For n>=3 --
times 3 n <= n^2 = f_0 n
upify f_a n = n f_a 1 < 2^n f_a n = f_{a+1} n
g n = n upify (times 3) 3 < n upify f_0 3 < f_n 3 <= f_n n = f_w n

-- THEOREM --
graham = 64 g 4 < 64 f_w 64 = f_{w+1} 64


--- COQ PROOF FOR EARLIER VERSION ---

2 = λA:*λf:A->A.λx:A.f (f x) : nat = ΠA:*.(A->A)->A->A
2' = λn:natλA:*λf:(A->A).n A (n A f) : nat->nat
H = λh:((nat->nat)->nat->nat)λf:(nat->nat)λn:nat.n (nat->nat) h f n : ((nat->nat)->nat->nat)->(nat->nat)->nat->nat
N = 2 (nat->nat) (2 ((nat->nat)->nat->nat) H (2 nat)) 2' 2 : nat

H::T3 = \(h::T2)\(f::T1)\(n::T0).n h f n;
(2::T3) ((2::T4) (H::T3) (2::T2)) (2::T1) (2::T0)

With -impredicative-set, following type checks in Coq:
Definition mynat : Set := forall A : Set, (A -> A) -> A -> A.
Definition two : mynat := fun A f x => f (f x).
Definition two' : mynat -> mynat := fun n A f => n A (n A f).
Definition H : ((mynat -> mynat) -> mynat -> mynat) -> (mynat -> mynat) -> mynat -> mynat
:= fun h f n =>n (mynat -> mynat) h f n.
Definition N : mynat := two (mynat -> mynat) (two ((mynat -> mynat) -> mynat -> mynat) H (two mynat)) two' two.
