-- E has growth rate epsilon_0 at 79 bits
-- design inspired from https://codegolf.stackexchange.com/questions/44560/combinator-quines/235867#235867 by Code Golf user https://codegolf.stackexchange.com/users/98257/2014melo03
-- optimized down from 106 bits by Bertram Felgenhauer
let
  D = \cont\s\x.cont(\h.s h x);
  id = \x.x;
  G = \c\d. c (D d) (d id);
  false = \x\y.y;
  _d0 = \s\n.s n n;
  E = \n.n G false _d0 n;
  2 = \f\x.f(f x);
in E

-- = 3 D (\s\n.s n n) id
-- = D (D (D (\s\n.s n n))) id
-- = \x1. D (D (\s\n.s n n)) (\h.id h x1)
-- = \x1. D (D (\s\n.s n n)) <x1>
-- = \x1 \x2. D (\s\n.s n n) <x1 x2>
-- = \x1 \x2 \x3. (\s\n.s n n) <x1 x2 x3>
-- = \x1 \x2 \x3. \n. n x1 x2 x3 n
-- Bertram instead viewed D as a function transformer
-- e.g. D (\s\n\c\b\a. s n c b a n) = (\s\n\d\c\b\a. s n d c b a n)

-- E 3 = G (G (G false)) _d0 3
--     = G (G false) _d1 d0 3
--     = G false _d2 d1 d0 3
--     = false _d3 d2 d1 d0 3
--     = d2 d1 d0 3
